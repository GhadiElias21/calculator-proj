{"mappings":"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","sources":["script.js"],"sourcesContent":["//so to store the information of the operand and all the other methods\r\n// i decided to create a calculator class\r\nclass Calculator {\r\n  constructor(\r\n    previousOperandTextElement,\r\n    currentOperandTextElement //because we need to know where to place the display text of our calculator\r\n  ) {\r\n    this.previousOperandTextElement = previousOperandTextElement;\r\n    this.currentOperandTextElement = currentOperandTextElement;\r\n    this.clear(); // we want to clear all the inputs  as soon as we create a new calculator\r\n  }\r\n  // the operations\r\n\r\n  clear() {\r\n    this.currentOperand = \"\";\r\n    this.previousOperand = \"\";\r\n    this.operation = undefined; // beacause we dont have any operation selected if we clear\r\n  }\r\n  // it add the number clicked by the user\r\n\r\n  appendNumber(number) {\r\n    if (number === \".\" && this.currentOperand.includes(\".\")) return; //to not add more than 1 period\r\n    this.currentOperand = this.currentOperand.toString() + number.toString(); //we convert everything to a string because javascript will try to add these as actual number so we need 1+1=2 instead of 1+1=11\r\n  }\r\n\r\n  chooseOperation(operation) {\r\n    if (this.currentOperand === \"\") return; // if we dont have a current operand we want to stop excuting the code\r\n    if (this.previousOperand !== \"\") {\r\n      this.compute(); // so if we have 2 values and click another operation it will do the computation\r\n    }\r\n    this.operation = operation; // the calculator know what operation to use\r\n    this.previousOperand = this.currentOperand; //we are done typing the current number so we recycle it to the previous operand\r\n    this.currentOperand = \"\"; //clearing the value\r\n  }\r\n  //take our values inside our calculator and compute the value\r\n  compute() {\r\n    let computation;\r\n    const prev = parseFloat(this.previousOperand);\r\n    const current = parseFloat(this.currentOperand);\r\n    //if the user does not enter anything and we click equal we dont want the code to run\r\n    if (isNaN(prev)) return;\r\n    switch (this.operation) {\r\n      case \"+\":\r\n        computation = prev + current;\r\n        break;\r\n      case \"—\":\r\n        computation = prev - current;\r\n        break;\r\n      case \"X\":\r\n        computation = prev * current;\r\n        break;\r\n      case \"÷\":\r\n        computation = prev / current;\r\n        break;\r\n      case \"%\":\r\n        computation = prev / 100;\r\n\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.currentOperand = computation;\r\n    this.operation = undefined;\r\n    this.previousOperand = \"\";\r\n    console.log(this.operation);\r\n  }\r\n  signChange() {\r\n    if (this.currentOperand == 0) return;\r\n\r\n    this.currentOperand = -this.currentOperand;\r\n  }\r\n\r\n  getDisplayNumber(number) {\r\n    //format the output\r\n    const stringNumber = number.toString(); //we convert the number to a string ,then we seperate the integer and decimal digits\r\n    const integerDigits = parseFloat(stringNumber.split(\".\")[0]);\r\n    const decimalDigits = stringNumber.split(\".\")[1];\r\n    let integerDisplay;\r\n    if (isNaN(integerDigits)) {\r\n      integerDisplay = \"\";\r\n    } else {\r\n      integerDisplay = integerDigits.toLocaleString(\"en\", {\r\n        maximumFractionDigits: 0,\r\n      }); //there can never be any decimal places after this value when it gets converted to a string with a bunch of commas\r\n    }\r\n    if (decimalDigits != null) {\r\n      //if the user did enter a period and have some numbers after it\r\n      return `${integerDisplay}.${decimalDigits}`;\r\n    } else {\r\n      return integerDisplay;\r\n    }\r\n  }\r\n\r\n  updateDisplay() {\r\n    this.currentOperandTextElement.innerText = this.getDisplayNumber(\r\n      this.currentOperand\r\n    );\r\n    if (this.operation != null) {\r\n      this.previousOperandTextElement.innerText = `${this.getDisplayNumber(\r\n        this.previousOperand\r\n      )} ${this.operation}`;\r\n    } else {\r\n      this.previousOperandTextElement.innerText = \"\";\r\n    }\r\n  }\r\n}\r\nconst numberButtons = document.querySelectorAll(\"[data-number]\"); //we select all the  elements that match the data attribute string 'data-number'\r\nconst operationButtons = document.querySelectorAll(\"[data-operation]\"); //we select here all the operations buttons\r\nconst equalsButton = document.querySelector(\"[data-equals]\");\r\nconst allClearButton = document.querySelector(\"[data-all-clear]\");\r\nconst signChange = document.querySelector(\"[data-change-sign]\");\r\nconst previousOperandTextElement = document.querySelector(\r\n  \"[data-previous-operand]\"\r\n);\r\nconst currentOperandTextElement = document.querySelector(\r\n  \"[data-current-operand]\"\r\n);\r\n\r\nconst calculator = new Calculator(\r\n  previousOperandTextElement,\r\n  currentOperandTextElement\r\n); // we create a calculator\r\n\r\nnumberButtons.forEach((button) => {\r\n  //to loop over all the number buttons without creating a new array we use forEach\r\n  button.addEventListener(\"click\", () => {\r\n    calculator.appendNumber(button.innerText); //we add whatever inside the button that we click 1,2,3 ...\r\n    calculator.updateDisplay(); // every time we click on a number the display will be updated\r\n  });\r\n});\r\noperationButtons.forEach((button) => {\r\n  //to loop over all the opeartion buttons without creating a new array we use forEach\r\n  button.addEventListener(\"click\", () => {\r\n    calculator.chooseOperation(button.innerText); //we add whatever inside the button that we click +, x, /\r\n    calculator.updateDisplay(); // every time we click on an operation button the display will be updated\r\n  });\r\n});\r\n\r\nequalsButton.addEventListener(\"click\", (button) => {\r\n  calculator.compute();\r\n  calculator.updateDisplay();\r\n});\r\n\r\nallClearButton.addEventListener(\"click\", (button) => {\r\n  calculator.clear();\r\n  calculator.updateDisplay();\r\n});\r\n\r\nsignChange.addEventListener(\"click\", (button) => {\r\n  calculator.signChange();\r\n  calculator.updateDisplay();\r\n});\r\n\r\nconst toggle = document.getElementById(\"toggle_dark\");\r\nconst body = document.querySelector(\"body\");\r\nconst calc = document.getElementById(\"calculator\");\r\nconst output=document.getElementById('result')\r\ntoggle.addEventListener(\"click\", function () {\r\n  this.classList.toggle(\"fa-moon\");\r\n  if (this.classList.toggle(\"bi-brightness-high-fill\")) {\r\n    body.style.background = \"white\";\r\n    body.style.color = \"black\";\r\n    body.style.transition = \"1s\";\r\n    numberButtons.forEach((button) => {\r\n      button.style.background = \"#7d7d7d\";\r\n    });\r\n\r\n\r\n    operationButtons.forEach((button) => {\r\n      button.style.background = \"orange\";\r\n      button.style.transition = \"1.5s\";\r\n    });\r\n\r\n\r\n    calc.style.boxShadow = \"-15px 15px 8px 0px rgba(0, 0, 0, 0.6)\";\r\n    calc.style.transition = \"1.5s\";\r\n    output.style.backgroundColor='#535353'\r\n\r\n  } \r\n  \r\n  \r\n  else {\r\n    body.style.background = \"black\";\r\n    body.style.color = \"white\";\r\n    body.style.transition = \"1s\";\r\n    numberButtons.forEach((button) => {\r\n      button.style.background = \"orange\";\r\n      button.style.transition = \"1.5s\";\r\n      output.style.transition='1.5s'\r\n\r\n    });\r\n    operationButtons.forEach((button) => {\r\n      button.style.background = \"#7d7d7d\";\r\n    });\r\n    equalsButton.style.background = \"#7d7d7d\";\r\n    calc.style.boxShadow = \"-15px 15px 8px 0px  rgba(262, 122, 3, 0.6)\";\r\n    calc.style.transition = \"1.5s\";\r\n    output.style.backgroundColor='#ff9500'\r\n    output.style.transition='1.5s'\r\n\r\n  }\r\n});\r\n\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}